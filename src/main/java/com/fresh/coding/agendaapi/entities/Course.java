package com.fresh.coding.agendaapi.entities;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a course entity within the application.
 * This class maps to the 'course' table in the database.
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@EqualsAndHashCode
@Entity
@Builder
public class Course {

    /**
     * The unique identifier for the course.
     * This field is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the course.
     */
    private String courseName;

    /**
     * The professor who teaches the course.
     * This is a many-to-one relationship with the {@link User} entity.
     * The fetch type is LAZY to optimize performance by loading the professor only when needed.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @ToString.Exclude
    private User professor;

    /**
     * A textual description of the course.
     */
    @Column(columnDefinition = "TEXT")
    private String description;

    /**
     * A list of course schedules associated with this course.
     * This relationship is mapped by the 'course' field in the {@link CourseSchedule} entity.
     * The list is initialized to an empty list by default.
     * Cascade type ALL and orphanRemoval are enabled, which means that all changes to the course schedules
     * are cascaded to the database, and orphaned schedules are removed.
     */
    @Builder.Default
    @ToString.Exclude
    @OneToMany(mappedBy = "course", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<CourseSchedule> courseSchedules = new ArrayList<>();

    /**
     * The timestamp when the course was created.
     * Automatically set before persisting the entity.
     */
    private LocalDateTime createdAt;

    /**
     * The timestamp when the course was last updated.
     * Automatically updated before updating the entity.
     */
    private LocalDateTime updatedAt;

    /**
     * Sets the creation timestamp to the current time if it is not already set.
     * Also sets the updated timestamp to the current time before persisting the entity.
     */
    @PrePersist
    public void beforeCreate() {
        if (createdAt == null) {
            this.createdAt = LocalDateTime.now();
        }
        if (updatedAt == null) {
            this.updatedAt = LocalDateTime.now();
        }
    }

    /**
     * Updates the timestamp to the current time before updating the entity.
     */
    @PreUpdate
    public void beforeUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
}
