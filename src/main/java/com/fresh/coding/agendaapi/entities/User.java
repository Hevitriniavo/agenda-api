package com.fresh.coding.agendaapi.entities;

import com.fresh.coding.agendaapi.enums.Gender;
import com.fresh.coding.agendaapi.enums.Role;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a user entity within the application.
 * This class maps to the 'users' table in the database.
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@EqualsAndHashCode
@Entity
@Table(name = "users")
@Builder
public class User {

    /**
     * The unique identifier for the user.
     * This field is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The last name of the user.
     */
    private String lastname;

    /**
     * The first name of the user.
     */
    private String firstname;

    /**
     * The image URL or path associated with the user.
     * This field is defined as TEXT to accommodate longer image paths or URLs.
     */
    @Column(columnDefinition = "TEXT")
    private String image;

    /**
     * The password of the user.
     */
    private String password;

    /**
     * The email address of the user.
     * This field is unique to ensure no duplicate email addresses.
     */
    @Column(unique = true)
    private String email;

    /**
     * The birthdate of the user.
     */
    private LocalDate birthdate;

    /**
     * The gender of the user.
     * Uses the {@link Gender} enum to represent the gender.
     */
    @Enumerated(EnumType.STRING)
    private Gender gender;

    /**
     * The role of the user within the application.
     * Uses the {@link Role} enum to represent the role.
     */
    @Enumerated(EnumType.STRING)
    private Role role;

    /**
     * The student level associated with the user.
     * This is a many-to-one relationship with the {@link StudentLevel} entity.
     * The fetch type is LAZY to optimize performance by loading the student level only when needed.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @ToString.Exclude
    private StudentLevel level;

    /**
     * A list of courses associated with the user as a professor.
     * This relationship is mapped by the 'professor' field in the {@link Course} entity.
     * The list is initialized to an empty list by default.
     * Cascade type ALL and orphanRemoval are enabled, meaning that all changes to the courses
     * are cascaded to the database, and orphaned courses are removed.
     */
    @Builder.Default
    @ToString.Exclude
    @OneToMany(mappedBy = "professor", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Course> courses = new ArrayList<>();

    /**
     * The timestamp when the user was created.
     * Automatically set before persisting the entity.
     */
    private LocalDateTime createdAt;

    /**
     * The timestamp when the user was last updated.
     * Automatically updated before updating the entity.
     */
    private LocalDateTime updatedAt;

    /**
     * Sets the creation timestamp to the current time if it is not already set.
     * Also sets the updated timestamp to the current time before persisting the entity.
     */
    @PrePersist
    public void beforeCreate() {
        if (createdAt == null) {
            this.createdAt = LocalDateTime.now();
        }
        if (updatedAt == null) {
            this.updatedAt = LocalDateTime.now();
        }
    }

    /**
     * Updates the timestamp to the current time before updating the entity.
     */
    @PreUpdate
    public void beforeUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
}
